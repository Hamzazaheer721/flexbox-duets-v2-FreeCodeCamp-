.container {
  border: 5px solid #423423;
  display: flex;
  min-height: 30px;
  height: auto;
  padding: 20px;
  background-color: bisque;
}

/* Lecture# 1 */
/*if you apply automargins to flex items, it will automatically adjust its specified margin to occupy the extra space in */
/* in flex container, depending upon the direction in which this auto margin has been applied */

/* what this means is that setting the margin property on flex child will push the child away from that direction */
/* seting the margin-left: auto will push the child to most right side */
/* settting the margin-top: auto will push the child to the bottom */
/* sometimes justify-self and align-self may not give the best position then it would work for you */
/* .home{
  background-color: bisque;
}
.search{
  background-color: aqua;
}

.logout{
  background-color: aquamarine;
} */

/* Lecture# 2 */
/* if you want to make flexbox responsive then you'll have to given flex property to each of the child */
/* giving flex 1 to all the child will make flex do maths for you and give equal widths to the containers */
/* .container > div{
  flex: 1
} */

/* giving flex:2 will make a specific flex child take 2x times more space  */

/* Lecture# 3  */

/* flex basis will decide the width of the div if its flex direction is row */
/* if the size of the container is 800 and we give 400 basis to 2 flex children */
/* then empty space to the right will be remaining in the container */
/* setting flex-grow:1 for each flex children will make both equally take that empty space */
/* setting flex-grow to each of one will make one take all the remaining space */
/* default value of flex is flex: 1 1 0  <=> flex: 1*/
/* flex grow, flex shrink, flex basis */

/* Lecture# 4 */
/* Flex shrink will first wait for the flex-basis to reach then if the width gets smaller than flex-basis */
/* it will decide how a flex child will shrink comparatively */

/* Lecuture# 5 we can change the order of flex children by order property, the more the order the more it is pushed to the end */
/* By default order is 0 */
/* since order=-1 is smaller than 0 so it will put the item to the most left side */
/* .home{
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 200px;
  order: 1;
}
.search{
  flex-basis: 200px;
  flex-grow: 8;
  flex-shrink: 2;
  order: -1;
}

.logout{
  flex: 1 1 200px;
} */

/* Lecture# 6 making a responsive navbar with flexbox */
.search-input {
  outline: none;
  border: none;
  border-bottom: 2px solid #9b9b9b;
  background: transparent;
  width: 100%;
}

.logout {
  text-align: right;
}

.container > li {
  list-style-type: none;
  flex: 1;
}

.flex-input {
  flex: 3 !important;
}

@media all and (max-width: 600px) {
  .container {
    flex-wrap: wrap;
    text-align: center;
  }
  .container > li {
    flex: 1 1 50%;
  }
  .search-input {
    text-align: center;
  }
  .flex-input {
    flex: 1 1 50% !important;
  }
  .logout {
    text-align: center;
  }
}

@media all and (max-width: 300px) {
  .container > li {
    flex: 1 1 100%;
  }
  .flex-input {
    flex: 1 1 100% !important;
  }
}
